import os
import subprocess
import platform
import PySide6
import datetime
import argparse
import sys, io

# Support for UTF-8 encoding in Windows console
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# ----------------------------
# Multi-language messages
# ----------------------------
MESSAGES = {
    "zh_CN": {
        "select_language": "ËØ∑ÈÄâÊã©ËØ≠Ë®Ä / Please select language / Bitte w√§hlen Sie eine Sprache:",
        "options": "1. ‰∏≠Êñá\n2. English\n3. Deutsch",
        "enter_choice": "ËØ∑ËæìÂÖ•ÈÄâÊã© (1-3): ",
        "invalid_choice": "Êó†ÊïàÈÄâÊã©Ôºå‰ΩøÁî®ÈªòËÆ§‰∏≠Êñá",
        "detecting_paths": "üîç Ê≠£Âú®Ê£ÄÊµã‰ª•‰∏ãÂÄôÈÄâË∑ØÂæÑ:",
        "path_exists": "Â≠òÂú®",
        "path_not_exists": "‰∏çÂ≠òÂú®",
        "no_plugin_found": "‚ö† Êú™ÊâæÂà∞Êèí‰ª∂ÁõÆÂΩïÔºåÂèØËÉΩ PySide6 ÂÆâË£Ö‰∏çÂÆåÊï¥ÔºåÊàñ Nuitka Ëá™Â∏¶Êèí‰ª∂„ÄÇ",
        "detected_os": "üñ•Ô∏è Ê£ÄÊµãÂà∞Êìç‰ΩúÁ≥ªÁªü:",
        "start_packaging": "ÂºÄÂßãÊâìÂåÖ...",
        "added_windows_params": "‚úÖ Â∑≤Ê∑ªÂä† Windows ÁâπÂÆöÂèÇÊï∞",
        "added_platform_params": "‚úÖ Â∑≤Ê∑ªÂä† {} ÁâπÂÆöÂèÇÊï∞",
        "unknown_os": "‚ö†Ô∏è Êú™ËØÜÂà´ÁöÑÊìç‰ΩúÁ≥ªÁªü: {}Ôºå‰ΩøÁî®ÈªòËÆ§ÂèÇÊï∞",
        "plugin_added": "‚úÖ Êèí‰ª∂Ë∑ØÂæÑÂ∑≤Ê∑ªÂä†Âà∞ÂëΩ‰ª§: {} -> PySide6/{}",
        "i18n_added": "‚úÖ ËØ≠Ë®ÄÊñá‰ª∂Ë∑ØÂæÑÂ∑≤Ê∑ªÂä†Âà∞ÂëΩ‰ª§: i18n",
        "final_command": "üîß ÊúÄÁªàÊâìÂåÖÂëΩ‰ª§:",
        "build_success": "‚úÖ ÊâìÂåÖÊàêÂäüÔºåÂèØÊâßË°åÊñá‰ª∂Â∑≤ÁîüÊàêÂú® dist Êñá‰ª∂Â§π‰∏≠: {}",
        "build_failed": "‚ùå ÊâìÂåÖÂ§±Ë¥•ÔºåÈîôËØØÁ†Å: {}",
        "log_saved": "üìÑ ÂÆåÊï¥Êó•ÂøóÂ∑≤‰øùÂ≠òÂà∞ {}"
    },
    "en": {
        "select_language": "ËØ∑ÈÄâÊã©ËØ≠Ë®Ä / Please select language / Bitte w√§hlen Sie eine Sprache:",
        "options": "1. ‰∏≠Êñá\n2. English\n3. Deutsch",
        "enter_choice": "Enter your choice (1-3): ",
        "invalid_choice": "Invalid choice, using default English",
        "detecting_paths": "üîç Detecting candidate paths:",
        "path_exists": "exists",
        "path_not_exists": "not exists",
        "no_plugin_found": "‚ö† Plugin directory not found, PySide6 installation may be incomplete, or Nuitka has built-in plugins.",
        "detected_os": "üñ•Ô∏è Detected operating system:",
        "start_packaging": "Starting packaging...",
        "added_windows_params": "‚úÖ Added Windows-specific parameters",
        "added_platform_params": "‚úÖ Added {}-specific parameters",
        "unknown_os": "‚ö†Ô∏è Unknown operating system: {}, using default parameters",
        "plugin_added": "‚úÖ Plugin path added to command: {} -> PySide6/{}",
        "i18n_added": "‚úÖ Language files path added to command: i18n",
        "final_command": "üîß Final packaging command:",
        "build_success": "‚úÖ Build successful, executable generated: {}",
        "build_failed": "‚ùå Build failed, error code: {}",
        "log_saved": "üìÑ Complete log saved to {}"
    }
}

# ----------------------------
# Language selection
# ----------------------------
def select_language():
    """ÈÄâÊã©ËØ≠Ë®ÄÔºàÊú¨Âú∞‰∫§‰∫íÁî®Ôºâ"""
    print(MESSAGES["zh_CN"]["select_language"])
    print(MESSAGES["zh_CN"]["options"])
    try:
        choice = input(MESSAGES["zh_CN"]["enter_choice"])
        if choice == "1":
            return "zh_CN"
        elif choice == "2":
            return "en"
        elif choice == "3":
            return "de"
        else:
            print(MESSAGES["zh_CN"]["invalid_choice"])
            return "zh_CN"
    except (KeyboardInterrupt, EOFError):
        return "zh_CN"

def get_message(lang, key, *args):
    message = MESSAGES[lang].get(key, MESSAGES["en"].get(key, key))
    if args:
        return message.format(*args)
    return message

def get_pyside6_plugin_path(lang="zh_CN"):
    base_path = os.path.dirname(PySide6.__file__)
    candidates = [
        ("plugins", os.path.join(base_path, "plugins")),
        ("Qt/plugins", os.path.join(base_path, "Qt", "plugins")),
        ("Qt6/plugins", os.path.join(base_path, "Qt6", "plugins")),
        ("qt-plugins", os.path.join(base_path, "qt-plugins")),
    ]
    print(get_message(lang, "detecting_paths"))
    valid_paths = []
    for rel, path in candidates:
        if os.path.exists(path):
            print(f"  ‚úÖ {path}  ({get_message(lang, 'path_exists')})")
            valid_paths.append((rel, path))
        else:
            print(f"  ‚ùå {path}  ({get_message(lang, 'path_not_exists')})")
    if not valid_paths:
        print(get_message(lang, "no_plugin_found"))
    return valid_paths

def build_executable(lang):
    current_os = platform.system()
    plugin_paths = get_pyside6_plugin_path(lang)

    print(get_message(lang, "detected_os"), current_os)
    print(get_message(lang, "start_packaging"))

    command = [
        "python", "-m", "nuitka",
        "--standalone",
        "--onefile",
        "--enable-plugin=pyside6",
        "--output-dir=dist",
        "main.py"
    ]

    # OS-specific params
    if current_os == "Windows":
        command.extend([
            "--windows-icon-from-ico=icon.png",
            "--windows-console-mode=disable"
        ])
        print(get_message(lang, "added_windows_params"))
    elif current_os in ["Darwin", "Linux"]:
        command.append("--icon=icon.png")
        print(get_message(lang, "added_platform_params", current_os))
    else:
        print(get_message(lang, "unknown_os", current_os))

    if plugin_paths:
        for rel, path in plugin_paths:
            command.append(f"--include-data-dir={path}=PySide6/{rel}")
            print(get_message(lang, "plugin_added", path, rel))

    command.append("--include-data-dir=i18n=i18n")
    print(get_message(lang, "i18n_added"))

    print(get_message(lang, "final_command"))
    print(" ".join(command))

    log_file = "build.log"
    with open(log_file, "w", encoding="utf-8") as log:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        for line in iter(process.stdout.readline, ''):
            print(line, end='')
            log.write(line)
        process.stdout.close()
        retcode = process.wait()

        if retcode == 0:
            print(get_message(lang, "build_success"))
        else:
            print(get_message(lang, "build_failed", retcode))

        print(get_message(lang, "log_saved", log_file))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--lang", type=str, help="Language code: zh_CN/en/de")
    args = parser.parse_args()
    
    if args.lang:
        lang = args.lang
    else:
        lang = select_language()
    
    build_executable(lang)
